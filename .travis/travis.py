#!/usr/bin/env python3

import git
import os
import subprocess
import sys
import github

import importlib.util

PWD = os.path.dirname(os.path.abspath(__file__))
DEFAULT_BRANCH = 'master'


def test_diffs(diffs):
    """Check the diffs, also print them and fail the test if they exist"""
    if diffs:
        for diff in diffs:
            print(diff)
        raise ValueError('Autogenerated files are not up to date')


def test_builds(docker_tag_dir):
    """Check make build completes for the given repo tag directory"""
    command = ['make', 'build']
    with subprocess.Popen(
            command,
            stdout=subprocess.PIPE,
            cwd=docker_tag_dir,
            bufsize=1,
            universal_newlines=True) as p:
        for line in p.stdout:
            print(line, end='')  # process line here

    if p.returncode != 0:
        raise subprocess.CalledProcessError(p.returncode, p.args)


def main(argv=sys.argv[1:]):
    """Check travis context and trigger docker builds"""

    # Check environment
    REPO = os.environ['REPO']
    TAG = os.environ['TAG']
    OS_NAME = os.getenv('OS_NAME', '')
    OS_CODE_NAME = os.getenv('OS_CODE_NAME', '')
    BRANCH = os.environ['TRAVIS_BRANCH']
    PULL_REQUEST_BRANCH = os.environ['TRAVIS_PULL_REQUEST_BRANCH']
    REPO_SLUG = os.environ['TRAVIS_REPO_SLUG']
    BUILD_DIR = os.environ['TRAVIS_BUILD_DIR']

    print("REPO: ", REPO)
    print("TAG: ", TAG)
    print("OS_NAME: ", OS_NAME)
    print("OS_CODE_NAME: ", OS_CODE_NAME)
    print("REPO_SLUG: ", REPO_SLUG)
    print("BRANCH: ", BRANCH)
    print("PULL_REQUEST_BRANCH: ", PULL_REQUEST_BRANCH)

    USER = os.environ['GITHUB_USER']
    TOKEN = os.environ['GITHUB_TOKEN']

    REMOTE_TOKEN_URL = 'https://{user}:{token}@github.com/{repo_slug}'.format(
        user=USER,
        token=TOKEN,
        repo_slug=REPO_SLUG
    )

    # Expand the repo/tag directory
    docker_repo_dir = os.path.join(BUILD_DIR, REPO)
    docker_tag_dir = os.path.join(docker_repo_dir, TAG, OS_NAME, OS_CODE_NAME)

    # Import the dockerfile generation script
    spec = importlib.util.spec_from_file_location(
        "create.dockerfiles",
        os.path.join(docker_repo_dir, 'create_dockerfiles.py'))
    create_dockerfiles = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(create_dockerfiles)

    # Run the dockerfile generation script
    create_dockerfiles.main(('dir', '-d' + docker_tag_dir))

    # Create a git diff for the current repo
    repo = git.Repo(BUILD_DIR)  # , odbt=git.GitCmdObjectDB)
    diffs = repo.index.diff(None, create_patch=True)

    # Check if this is PR or Cron job test
    if PULL_REQUEST_BRANCH:
        # If this is a PR test
        print("Testing Pull Request for Branch: ", PULL_REQUEST_BRANCH)

        # Test that dockerfile generation has changed nothing
        # and that all dockerfiles are up to date
        test_diffs(diffs)

        target = repo.branches[BRANCH].commit
        pull_request = repo.head.commit
        pr_diffs = target.diff(pull_request, paths=[docker_tag_dir])

        if pr_diffs:
            # Test that the dockerfiles build
            # test_builds(docker_tag_dir)
            pass  # TODO undo

    else:
        print("Testing CronJob for Branch: ", BRANCH)

        # Test that dockerfile generation has changed nothing
        # and that all dockerfiles are up to date
        try:
            test_diffs(diffs)
        except ValueError as err:
            if BRANCH == DEFAULT_BRANCH:
                pr_branch_name = ('/').join([REPO, TAG, OS_NAME, OS_CODE_NAME])
                pr_owner_name = REPO_SLUG.split('/')[0]
                pr_head_name = pr_owner_name + ':' + pr_branch_name

                repo.git.add(all=True)
                message = "Updating Dockerfiles\n" + \
                    "This is an automated CI commit"
                repo.git.commit(m=message)

                # Import the dockerlibrary generation script
                spec = importlib.util.spec_from_file_location(
                    "create.dockerlibrary",
                    os.path.join(docker_repo_dir, 'create_dockerlibrary.py'))
                create_dockerlibrary = importlib.util.module_from_spec(spec)
                spec.loader.exec_module(create_dockerlibrary)

                # Run the dockerfile generation script
                create_dockerlibrary.main((
                    '--manifest', os.path.join(docker_repo_dir,
                                               'manifest.yaml'),
                    '--output', os.path.join(docker_repo_dir, REPO)))

                repo.git.add(all=True)
                message = "Updating Docker Library\n" + \
                    "This is an automated CI commit"
                repo.git.commit(m=message)

                g = github.Github(login_or_token=GITHUB_TOKEN)
                g_repo = g.get_repo(full_name_or_id=REPO_SLUG)
                try:
                    g_branch = g_repo.get_branch(branch=pr_branch_name)
                    g_pulls = g_repo.get_pulls(
                        state='open',
                        sort='created',
                        base=DEFAULT_BRANCH,
                        head=pr_branch_name)
                    if g_pulls:
                        raise ValueError(
                            'Specific PR for branch already exists')
                except github.GithubException as exception:
                    if exception.data['message'] != "Branch not found":
                        raise(exception)
                pr_remote = git.remote.Remote(
                    repo=repo, name='origin')
                try:
                    pr_remote.add(
                        repo=repo, name=REPO_SLUG, url=REMOTE_TOKEN_URL)
                    repo.git.checkout(b=pr_branch_name)
                    repo.git.push(REPO_SLUG, pr_branch_name, u=True)
                except as error:
                    raise ValueError(
                        'Push failed, so I must hide the secrits')

                title = "Updating {}".format(pr_branch_name)
                body = "This is an automated CI commit"
                g_repo.create_pull(
                    title=title,
                    body=body,
                    base=DEFAULT_BRANCH,
                    head=pr_branch_name)
            raise

        # Test that the dockerfiles build
        # test_builds(docker_tag_dir)
        pass  # TODO undo


if __name__ == '__main__':
    main()
